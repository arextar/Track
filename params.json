{"name":"Track","body":"# Track\r\nSimple but powerful routing in JavaScript\r\n\r\n\r\n## API\r\n### .**init**(*string* methods...)\r\nInitiates track choosing the first supported method in the list. Call this **after** binding callbacks with .on\r\n\r\n````js\r\n// Use HTML5 history API, falling back to hash when not available\r\ntrack.init('history', 'hash')\r\n````\r\n\r\n### .**on**(*string* path, *function* callback(*string* path))\r\nBinds callback to a given path. See the 'Routing' section below for more details on how the paths are formatted.\r\n\r\n````js\r\n// When a path such as \"/user/12\" is triggered, show an alert\r\ntrack.on('/user/:id', function(){\r\n  alert(\"Welcome to user #\" + this.id + \"'s profile!\")\r\n})\r\n````\r\n\r\n### .**go**(*string* path)\r\nTriggers callbacks for and takes the action defined by the current method (such as setting the hash) for the given path.\r\n\r\n````js\r\n// Triggers any callbacks associated with the path (if hash or history methods are present, the url is set for example).\r\ntrack.go('/user/12')\r\n````\r\n\r\n### .**clean**(*string* path)\r\nNormalizes the path by putting a '/' at the start and end (used internally)\r\n\r\n\r\n## Routing\r\nUse `:word` to indicate a wild-card. Use `this.word` to access in callbacks.\r\n\r\n* `user/:id` triggers on:\r\n * user/12\r\n * user/abc\r\n* `:action/user/:id` triggers on:\r\n * friend/user/1\r\n * poke/user/foobar\r\n\r\nUse `:word?` for optional wild-cards. Use `this.word` to access in callbacks (undefined if not present).\r\n\r\n* `user/:id/:edit?` triggers on:\r\n * `user/foo`\r\n * `user/foo/e`\r\n\r\nUse `{regexp}` for custom regular expressions in routes. Use `this[index]` to access in callbacks where index is the index of the custom regular expression (0 if it's first, 1 if it's second, etc.)\r\n\r\n* `user/{\\\\d+}` triggers on:\r\n * `user/6`\r\n * `user/123`\r\n* `user/:id/{edit}?` triggers on:\r\n * `user/12/edit`\r\n * `user/foobar/edit`\r\n\r\n\r\n## Methods\r\n### basic\r\nHolds current state in memory. Nothing more.\r\n\r\n### hash\r\nGets, sets, and monitors the URL hash.\r\n\r\n### history\r\nUses the html5 history API.\r\n\r\n### persist\r\nUses localStorage and userData to save the current path.\r\n\r\n\r\n## Adding new methods\r\n\r\n````js\r\n\r\ntrack.methods.method_name = {\r\n    detect: function () {/*Return treu if supported, false otherwise*/},\r\n    init: function () {/*Initiate by binding any events and triggering the first path*/},\r\n    set: function (path) {/*Set the path (e.g.: setting location.hash)*/}\r\n}\r\n\r\n````","tagline":"Simple and powerful routing in JavaScript (Beta)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}